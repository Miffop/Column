Variables:
#<variableName>::<valueOrExpression>;
#<varName>|<subVarName>::<valueOrExpresion>;
#<varName>|(<ExpresionReturningSubVarName>)::<valueOrExprsion>;
#<varName>|<subVarName1>|<subVarName2>::<valueOrExpresion>;{every variable or subvariable may have subvariables}

Literals:
"someString"-string
'c'-charecter{its code stored as an integer}
383 - integer
3.14 - real

Operations:
  + add
  - subract
  * multiply
  / divide
  % module
  _ negate
  ** power
  == equal
  != not equal
  > greater
  < less
  >= greater or equal
  <= less or equal
  << shl
  >> shr
  & bitwise and
  . bitwise or
  ^ bitwise xor
  ~ bitwise not
  && logic and
  .. logic or
  ^^ logic xor
  ~~ logic not
  = get value

Operations order:
  1)()
  2)~,~~,_,=
  3)**
  4)*,/,%
  5)+,-
  6)<<,>>
  7)<,<=,>,>=
  8)==,!=
  9)&
  10)^
  11).
  12)&&
  13)^^
  14)..

Operators:
  !if(<condition1>){0-false, noneZeroValue-true}
  //
    <...>
  \\
  !else !if(<condition2>)
  //
    <...>
  \\
  !else
  //
    <...>
  \\
  
  !while(<condition>)
  //
    <...>
  \\
  
  !for(<counterInit>;<condition>;<counterIncrement>;)
  //
    <...>
  \\
  
  !repeat
  //
    <...>
  \\
  !while(<condition>)
  
  !try
  //
    <...>
  \\
  !catch
  //
    <...>
  \\
  
  !break - break out of the cycle
  !continue -move to the next iteration of the cycle
  !nop - do nothing

Methods:
  !meth $<methodName1>(#<argument1>,#<argument2>,...){Creating method}
  //
     <...>
     !meth <methodName2>(){Createing a method inside the method}
     //
        {When Creating the method '$' sign before its name is optional}
        <...>
     \\
     <...>
     Result::<someExpression>;
  \\
  @<methodName1>(<someExpression1>,<someExpression2>,<someExpression3>,...);{method Call}

Comments:
  {someComment}
  <...>
  {otherComment}

Pointers:
  #Variable1:: :Variable2; {get the pointer to the variable2 and put it into the other variable1}
  #Variable3:: =Variable1; {get the value of the pointer stored in Variable1}{Variable contains the value stored in Variable2}
               {'='can be a prefix or an operation so this spelling "=#Variable1" is also valid}
               {be careful: if want to get the value of double pointer don't write like this "==DoubelPtr" instead write "=(=DoublePtr)" or "= =DoublePtr"}
  :Variable4:: #Variable1; {make the Variable4 act as the variable that Variable1 points on}
              {every change in the value or subvariables' values of Variable4 will affect Variable2}
  

P.S:
  you can find example programs in /ColumnTest/zProg
